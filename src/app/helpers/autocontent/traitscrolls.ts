import { startCase } from 'lodash';
import {
  IItemDefinition,
  IModKit,
  ItemClass,
  Skill,
} from '../../../interfaces';
import { id } from '../id';

const romans: Record<number, string> = {
  1: 'I',
  2: 'II',
  3: 'III',
  4: 'IV',
  5: 'V',
};

const TRAIT_PREFIX = `Rune Scroll - `;

export function generateTraitScrolls(
  mod: IModKit,
  allTraitTrees: any = {}
): IItemDefinition[] {
  const scrollToClass: Record<string, string[]> = {};
  const allRuneScrolls = new Set<string>();

  const returnedRuneScrolls: IItemDefinition[] = [];

  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  Object.keys(allTraitTrees).forEach((classTree) => {
    if (classTree === 'Ancient') return;

    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    Object.keys(allTraitTrees[classTree].trees).forEach((treeName) => {
      if (treeName === 'Ancient') return;

      const tree = allTraitTrees[classTree].trees[treeName].tree;

      tree.forEach(({ traits }: any) => {
        traits.forEach(({ name, maxLevel }: any) => {
          if (!name || maxLevel <= 1) return;

          scrollToClass[name] ??= [];

          allRuneScrolls.add(name as string);

          if (classTree !== 'Core' && treeName !== 'Core') {
            scrollToClass[name].push(classTree);
          }
        });
      });
    });
  });

  Array.from(allRuneScrolls).forEach((scrollName) => {
    for (let i = 1; i <= 5; i++) {
      const scrollSpaced = startCase(scrollName);
      const itemName = `${TRAIT_PREFIX} ${scrollSpaced} ${romans[i]}`;

      returnedRuneScrolls.push({
        _id: `${id()}-AUTOGENERATED`,
        name: itemName,
        sprite: 681,
        animation: 10,
        desc: `a runic scroll imbued with the empowerment "${scrollSpaced} ${romans[i]}"`,
        trait: {
          name: scrollName,
          level: i,
          restrict: scrollToClass[scrollName],
        },
        requirements: {
          level: 5 + (i - 1) * 10,
        },
        value: 1,
        itemClass: ItemClass.Scroll,
        type: Skill.Martial,
        stats: {},
        isSackable: true,
      } as IItemDefinition);
    }
  });

  return returnedRuneScrolls;
}

export function countExistingTraitScrolls(mod: IModKit): number {
  return mod.items.filter((i) => i.name.includes(TRAIT_PREFIX)).length;
}

export function applyTraitScrolls(
  mod: IModKit,
  scrolls: IItemDefinition[]
): void {
  mod.items.push(...scrolls);
}

export function cleanOldTraitScrolls(mod: IModKit): void {
  mod.items = mod.items.filter((item) => !item.name.includes(TRAIT_PREFIX));
}
