import { sortBy } from 'lodash';
import {
  BaseClassType,
  IModKit,
  ModJSON,
  ValidationMessageGroup,
} from '../../interfaces';
import {
  checkAutogenerated,
  checkItemDescriptions,
  checkItemStats,
  checkItemUses,
  checkMapBGMs,
  checkMapItems,
  checkMapNPCDialogs,
  checkMapNPCs,
  checkMapObjects,
  checkMapProperties,
  checkMapSpawners,
  checkMapTeleports,
  checkNPCs,
  checkNPCUsages,
  checkQuests,
  checkRecipes,
  checkSpawners,
  nonexistentItems,
  nonexistentNPCs,
  nonexistentRecipes,
  validateAchievements,
  validateDialogActions,
  validateDialogs,
  validateDialogsItems,
  validateDroptables,
  validateEvents,
  validateItems,
  validateNPCs,
  validateQuests,
  validateRecipes,
  validateRNGDungeons,
  validateSpawners,
  validateTraitTreeData,
  validateTraitTrees,
} from './validators';
import { validateSTEMProperties, validateSTEMs } from './validators/stem';

export async function validationMessagesForMod(
  mod: IModKit,
  classes: BaseClassType[],
  json: ModJSON,
): Promise<ValidationMessageGroup[]> {
  const validationQueue = [
    () => [checkItemStats(mod)],
    () => [checkItemDescriptions(mod)],
    () => [checkItemUses(mod, classes)],
    () => [checkMapNPCDialogs(mod)],
    () => [checkNPCUsages(mod)],
    () => [checkNPCs(mod)],
    () => [checkRecipes(mod)],
    () => [checkSpawners(mod)],
    () => [checkQuests(mod)],
    () => checkMapBGMs(mod, json),
    () => checkMapProperties(mod),
    () => checkMapTeleports(mod),
    () => checkMapSpawners(mod),
    () => checkMapItems(mod),
    () => checkMapObjects(mod),
    () => checkMapNPCs(mod),
    () => [validateEvents(mod)],
    () => [validateDialogs(mod)],
    () => [validateDialogActions(mod)],
    () => [validateDialogsItems(mod, classes)],
    () => [validateTraitTrees(mod)],
    () => [validateTraitTreeData(mod, classes)],
    () => [validateItems(mod)],
    () => [validateDroptables(mod)],
    () => [validateNPCs(mod)],
    () => [validateQuests(mod)],
    () => [validateRecipes(mod)],
    () => [validateSpawners(mod)],
    () => [validateSTEMs(mod)],
    () => [validateSTEMProperties(mod)],
    () => [validateRNGDungeons(mod, classes)],
    () => [validateAchievements(mod)],
    () => [nonexistentItems(mod)],
    () => [nonexistentNPCs(mod)],
    () => [nonexistentRecipes(mod)],
    () => [checkAutogenerated(mod)],
  ];

  const validationContainer: ValidationMessageGroup[] = [];

  for (const job of validationQueue) {
    validationContainer.push(...job().flat());

    await scheduler.yield();
  }

  validationContainer.forEach((v) => {
    v.messages = sortBy(v.messages, 'message');
  });

  validationContainer.forEach((v) => {
    if (v.messages.length !== 0) return;

    v.messages.push({
      type: 'good',
      message: 'No abnormalities!',
    });
  });

  return sortBy(validationContainer, 'header');
}
